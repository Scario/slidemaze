<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx=0;
my=0;
mxs=0;
mys=0;
swipe=false;
swipe_time=0;
swipe_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_check_button_pressed(mb_left) {
swipe=true;
mxs=mouse_x;
mys=mouse_y;
}
if (swipe) {
    mx=mouse_x;
    my=mouse_y;
    swipe_time++;
    if mouse_check_button_released(mb_left) 
    {
    if obj_player.canmove=1 {
    var i=scr_Swipe_Check(mxs,mys,mx,my);
    with(i) {
        var a = obj_swipe.mx-obj_swipe.mxs;
        var b = obj_swipe.my-obj_swipe.mys;
        if (abs(b)&gt;abs(a)) 
        {
            if (b&gt;0 &amp;&amp; !place_meeting(x,y+(spr_player.sprite_height/2),obj_wall)) 
            {
                vspeed+=spd;
                obj_player.canmove=0;
            }
            if (b&lt;0 &amp;&amp; !place_meeting(x,y-(spr_player.sprite_height/2),obj_wall))
            {
                vspeed-=spd;
                obj_player.canmove=0;
            }
        }
        if (abs(a)&gt;abs(b)) 
        {
            if (a&gt;0 &amp;&amp; !place_meeting(x+(spr_player.sprite_width/2),y,obj_wall)) 
            {
                hspeed+=spd;
                obj_player.canmove=0;
            }
            if (a&lt;0 &amp;&amp; !place_meeting(x-(spr_player.sprite_width/2),y,obj_wall))
            {
                hspeed-=spd;
                obj_player.canmove=0;
            }
        }
        

        //speed=other.swipe_speed;
        //direction=point_direction(other.mxs, other.mys, other.mx, other.my);
    }
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
